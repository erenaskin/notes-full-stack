# 1. BÖLÜM: Genel Bilgiler
name: Notes App CI/CD Pipeline

# 2. BÖLÜM: Tetikleyici (Trigger)
on:
  push:
    branches: [ "main" ]

# 3. BÖLÜM: İşler (Jobs)
jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_USER: erenaskin
          POSTGRES_PASSWORD: Ea030903*
          POSTGRES_DB: notes_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    # Bu işin adımları (sırayla çalışır)
    steps:
      # Adım 1.1: Kodumuzu GitHub'dan sanal makineye indiriyoruz.
      - name: Kodu Sanal Makineye İndir
        uses: actions/checkout@v3

      # Adım 1.2: Sanal makineye Java 17 kuruyoruz.
      - name: Java 17 Kurulumu
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Adım 1.3: Maven ile test komutunu çalıştırıyoruz.
      - name: Maven ile Testleri Çalıştır
        run: ./api/mvnw -f api/pom.xml test

  # --- İŞ 2: Frontend Kodunu Test Et ---
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      # Adım 2.1: Kodu indir.
      - name: Kodu Sanal Makineye İndir
        uses: actions/checkout@v3

      # Adım 2.2: Sanal makineye Flutter SDK'sını kur.
      - name: Flutter SDK Kurulumu
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # Adım 2.3: Flutter testlerini çalıştır.
      - name: Flutter Analiz ve Testleri Çalıştır
        run: |
          cd notes
          flutter pub get
          flutter analyze
          flutter test

  # --- İŞ 3: Docker İmajı Oluştur ve Yayınla ---
  build-and-push-docker:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    steps:
      # Adım 3.1: Kodu indir.
      - name: Kodu Sanal Makineye İndir
        uses: actions/checkout@v3

      # Adım 3.2: Docker Hub hesabına giriş yap.
      # Kullanıcı adı ve şifreyi doğrudan buraya yazmıyoruz. GÜVENLİK!
      # Bunun yerine GitHub'ın gizli kasasını (Secrets) kullanıyoruz.
      - name: Docker Hub'a Giriş Yap
        uses: docker/login-action@v2
        with:
          username: erenaskin
          password: Ea030903*

      # Adım 3.3: Docker imajını oluştur ve Docker Hub'a gönder.
      - name: Docker İmajını Oluştur ve Docker Hub'a Gönder
        uses: docker/build-push-action@v4
        with:
          # Dockerfile'ın hangi klasörde olduğunu belirtiyoruz.
          context: ./api
          # 'true' demek, oluşturduktan sonra Docker Hub'a gönder demek.
          push: true
          # İmajımıza bir isim (etiket) veriyoruz.
          # 'erenaskin' kısmını KENDİ DOCKER HUB KULLANICI ADINIZLA DEĞİŞTİRİN!
          tags: erenaskin/notes:latest